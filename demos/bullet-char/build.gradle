
apply plugin: 'java'
apply plugin: 'application'

mainClassName='com.simsilica.demo.bullet.Main'

version='1.0.0-SNAPSHOT'

//ext.jmeVersion = "3.2.1-stable"
ext.jmeVersion = "3.4.0-SNAPSHOT"

sourceCompatibility = 1.7

def useNativeBullet = false

repositories {
    flatDir {
        dirs rootProject.file('lib')
    }
    mavenLocal()

    if( JavaVersion.current() == JavaVersion.VERSION_1_7 ) {
        // Fallback for JDK 7 that can no longer connect to jcenter with https
        maven { url "http://jcenter.bintray.com" }
    } else {
        jcenter()
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile rootProject
    compile(project(":extensions:sio2-bullet")) {
        exclude group: 'org.jmonkeyengine', module: 'jme3-bullet'
    }
    
    compile 'com.google.guava:guava:19.0'
    
    compile "org.jmonkeyengine:jme3-core:$jmeVersion"
    compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"

    // For postproc
    compile "org.jmonkeyengine:jme3-effects:$jmeVersion"

    if( useNativeBullet ) {
        compile "org.jmonkeyengine:jme3-bullet:$jmeVersion"
        compile "org.jmonkeyengine:jme3-bullet-native:$jmeVersion"
    } else {
        compile("org.jmonkeyengine:jme3-jbullet:$jmeVersion") {
            exclude group: 'jbullet', module:'jbullet' 
            exclude group: 'stack-alloc', module:'stack-alloc'
        }
        compile files('lib/jbullet.jar')
        runtime files('lib/stack-alloc.jar')
    }
    
    compile "com.simsilica:lemur:1.12.0"
    compile "com.simsilica:lemur-proto:1.10.0"    
    compile "com.simsilica:lemur-props:1.1.0"    
    runtime 'org.codehaus.groovy:groovy-all:2.4.5'

    compile "com.simsilica:sim-math:1.3.0"

    compile 'org.slf4j:slf4j-api:1.7.13'
    // Actual implementation behind slf4j
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    
}



// Configuration to produce maven-repo style -sources and -javadoc jars
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude '**/.backups' 
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
 
artifacts {
    archives sourcesJar
    archives javadocJar
}


